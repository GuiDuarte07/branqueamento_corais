// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  Article       Article[]
}

model Article {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  title     String
  published Boolean    @default(true)
  approved  Boolean    @default(false)
  abstract  String
  pdfName   String?
  pdfpath   String?
  keywords  keywords[]
  Authors   Authors[]
  User      User       @relation(fields: [userId], references: [id])
  userId    String
}

model keywords {
  id        Int     @id @default(autoincrement())
  name      String
  article   Article @relation(fields: [articleId], references: [id])
  articleId String
}

model Authors {
  id        String  @id @default(cuid())
  fullname  String
  email     String
  phone     String
  article   Article @relation(fields: [articleId], references: [id])
  articleId String
}

enum Role {
  ADMIN
  USER
  DEV
}
